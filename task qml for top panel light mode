Kirigami.Icon {
    id: icon
    anchors.fill: parent
    active: false
    enabled: true
    source: model.decoration
    z: 999
    clip: false

    transform: Translate {
        id: iconTranslate
        y: 0
    }
}

Item {
    anchors.fill: parent
    z: 1000

    Timer {
        id: launchDelayTimer
        interval: 350
        repeat: false
        onTriggered: {
            TaskTools.activateTask(modelIndex(), model, Qt.NoModifier, task, Plasmoid, tasksRoot, effectWatcher.registered);
        }
    }

    TapHandler {
        acceptedButtons: Qt.LeftButton
        gesturePolicy: TapHandler.ReleaseWithinBounds

        onTapped: (eventPoint, button) => {
            clickBounceAnim.restart();

            if (!model.IsWindow) {
                launchDelayTimer.start();
            } else {
                TaskTools.activateTask(modelIndex(), model, eventPoint.modifiers, task, Plasmoid, tasksRoot, effectWatcher.registered);
            }

            eventPoint.accepted = false;
        }
    }
}

SequentialAnimation {
    id: clickBounceAnim
    running: false
    loops: 1

    ScriptAction {
        script: {
            bounceDown.from = iconTranslate.y
            bounceDown.to = -6   // Start by moving up (offset -6)
        }
    }

    PropertyAnimation {
        id: bounceDown
        target: iconTranslate
        property: "y"
        duration: 100
        easing.type: Easing.InOutCubic
    }

    PropertyAnimation {
        target: iconTranslate
        property: "y"
        to: 10            // Move down (offset +10)
        duration: 160
        easing.type: Easing.OutCubic
    }

    PropertyAnimation {
        target: iconTranslate
        property: "y"
        to: 0             // Back to center
        duration: 160
        easing.type: Easing.InCubic
    }
}


Rectangle {
    id: openBar
    width: model.IsWindow && model.IsActive ? 28 : 12
    height: 2.5
    radius: height / 2
    anchors.horizontalCenter: icon.horizontalCenter
    anchors.top: icon.top
    anchors.topMargin: -1.5

    color: model.IsWindow && model.IsActive
        ? Qt.rgba(0, 0, 0, 0.9)
        : Qt.rgba(0, 0, 0, 0.5)

    visible: model.IsWindow && !model.IsLauncher

    Behavior on width {
        NumberAnimation {
            duration: 200
            easing.type: Easing.InOutQuad
        }
    }

    Behavior on color {
        ColorAnimation {
            duration: 200
            easing.type: Easing.InOutQuad
        }
    }
}
